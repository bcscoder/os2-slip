slip 21
fcfs
#include<math.h>
#include<stdio.h>
#include<stdlib.h>
int main()
{
 int i,n,req[50],mov=0,cp;
 printf("enter the current position\n");
 scanf("%d",&cp);
 printf("enter the number of requests\n");
 scanf("%d",&n);
 printf("enter the request order\n");
 for(i=0;i<n;i++)
 {
 scanf("%d",&req[i]);
 }
 mov=mov+abs(cp-req[0]);
 printf("%d -> %d",cp,req[0]);
 for(i=1;i<n;i++)
 {
 mov=mov+abs(req[i]-req[i-1]);
 printf(" -> %d",req[i]);
 }
 printf("\n");
 printf("total head movement = %d\n",mov);
}
-----------------------------------
Write an MPI program to calculate sum of all even randomly generated 1000 
numbers (stored in array) on a cluster
#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#define ARRAY_SIZE 1000
int main(int argc, char* argv[]) {
 int rank, size, i;
 int array[ARRAY_SIZE];
 int local_sum = 0, total_sum;
 // Initialize the MPI environment
 MPI_Init(&argc, &argv);
 // Get the number of processes
 MPI_Comm_size(MPI_COMM_WORLD, &size);
 // Get the rank of the process
 MPI_Comm_rank(MPI_COMM_WORLD, &rank);
 // Seed the random number generator to get different results each time
 srand(rank + time(NULL));
 // Generate random numbers in each process and add to local sum if even
 for(i = 0; i < ARRAY_SIZE; i++) {
 array[i] = rand() % 100;
 if(array[i] % 2 == 0) {
 local_sum += array[i];
 }
 }
 // Print the local sum of each process
 printf("Local sum for process %d is %d\n", rank, local_sum);
 // Reduce all of the local sums into the total sum
 MPI_Reduce(&local_sum, &total_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
 // Print the total sum once at the root
 if (rank == 0) {
 printf("Total sum = %d\n", total_sum);
 }
 // Finalize the MPI environment
 MPI_Finalize();
 return 0;
}